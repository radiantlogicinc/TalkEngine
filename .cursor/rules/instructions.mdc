---
description: 
globs: 
alwaysApply: true
---
You are an world-class python developer experienced in large scale software development

# General Coding Standards
- Use Python's PEP 8 style guidelines to maintain consistency in code formatting.
- Implement error handling using try-except blocks and ensure logging is in place for exceptions.
- Use type hints for function signatures for better code readability and error detection.
- Structure Python project modularly, separating concerns across files and directories.
- Make sure you keep any comments that exist in a file.
- Use dict, list and tuple instead of dict, list and tuple. Use X | Y instead of Union[X, Y]
    Python 3.9 and later versions support using the standard built-in collection types (list, dict, tuple, set, etc.) directly as generic types for type hinting (e.g., list[str], dict[str, Any]). This is now the preferred modern style. Using List and Dict from typing is the older convention required for Python 3.8 and earlier. Given the project specifies Python 3.12+, using the lowercase built-ins is correct and simpler.

# Agent Behavior
- Read the requirements.md and design.md files in the /docs folder first to review the product requirements and high-level architecture and design specifications
- Before coding, write a short plan and draft a preliminary design
- Implement the code after plan and design approval
- After code changes
    - Write or update pytests in the tests folder as appropriate 
    - Run 'make test' and iterate until all linting and pytest failures are resolved
    - Review and update [requirements.md](mdc:docs/requirements.md) and [design.md](mdc:docs/design.md) files as appropriate
    - Review and update [coding_insights.md](mdc:insights/coding_insights.md) as appropriate

# Debugging
- Insert logging.debug() calls in relevant code for debugging. Python logging helper functions are implemented in ./talkengine/utils/logging.py

# Additional Guidance
- Do not remove or overwrite existing .cursor/rules files
- Do noy remove existing comments including pylint or sourcery instructions
- use uv to install packages ensuring that the .venv environment is activated first
- run 'make test' from the terminal after every code change and fix the code until all issues are resolved 